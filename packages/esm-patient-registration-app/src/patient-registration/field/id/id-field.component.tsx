import React, { useContext } from 'react';
import { IdentifierInput } from '../../input/custom-input/identifier/identifier-input.component';
import { IdentifierSource } from '../../patient-registration-types';
import styles from '../field.scss';
import { useTranslation } from 'react-i18next';
import { PatientRegistrationContext } from '../../patient-registration-context';

function containsSourceWithAnOption(sources: Array<IdentifierSource>): boolean {
  for (const source of sources) {
    if (source.autoGenerationOption) {
      return true;
    }
  }

  return false;
}

export const IdField: React.FC = () => {
  const { identifierTypes, inEditMode, values } = useContext(PatientRegistrationContext);
  const { t } = useTranslation();

  const identifierInputs = identifierTypes
    .map((identifierType) => {
      const sources = identifierType.identifierSources;
      const hasSourcesButWithoutOptions = sources.length > 0 && !containsSourceWithAnOption(sources);
      const mayOnlySupportAuto =
        sources.length == 1
          ? sources[0].autoGenerationOption
            ? !sources[0].autoGenerationOption.manualEntryEnabled
            : true
          : false;

      if (inEditMode && values[identifierType.fieldName]) {
        return null;
      } else if (hasSourcesButWithoutOptions || mayOnlySupportAuto) {
        // identifier will be autogenerated
        identifierType.autoGenerationSource = identifierType.identifierSources[0];
        return null;
      } else {
        return <IdentifierInput key={identifierType.fieldName} identifierType={identifierType} />;
      }
    })
    .filter(Boolean);

  if (identifierInputs.length > 0) {
    return (
      <div>
        <h4 className={styles.productiveHeading02Light}>{t('idFieldLabelText', 'Id')}</h4>
        <div className={styles.grid}>{identifierInputs}</div>
      </div>
    );
  } else {
    return null;
  }
};
