import React, { useContext, useCallback } from 'react';
import { IdentifierInput } from '../../input/custom-input/identifier/identifier-input.component';
import { IdentifierSource } from '../../patient-registration-types';
import styles from '../field.scss';
import { useTranslation } from 'react-i18next';
import { PatientRegistrationContext } from '../../patient-registration-context';
import { Button } from 'carbon-components-react';
import { showModal, WorkspaceItem, getNewWorkspaceItem } from '@openmrs/esm-framework';

function containsSourceWithAnOption(source: IdentifierSource): boolean {
  return source.autoGenerationOption ? true : false;
}

export const IdField: React.FC = () => {
  const { identifierTypes, inEditMode, values, showPatientIdentifiersOverlay, patientIdentifiersMap } =
    useContext(PatientRegistrationContext);
  const { t } = useTranslation();

  const identifierInputs = identifierTypes
    .filter((identifierType) => patientIdentifiersMap[identifierType.uuid].selected)
    .map((identifierType) => {
      const source = patientIdentifiersMap[identifierType.uuid].sourceSelected;
      const hasSourcesButWithoutOptions = !containsSourceWithAnOption(source);
      const mayOnlySupportAuto = source.autoGenerationOption ? !source.autoGenerationOption.manualEntryEnabled : true;

      if (inEditMode && values[identifierType.fieldName]) {
        return null;
      } else if (hasSourcesButWithoutOptions || mayOnlySupportAuto) {
        // identifier will be autogenerated
        identifierType.autoGenerationSource = identifierType.identifierSources[0];
        return null;
      } else {
        return (
          <div key={identifierType.fieldName} style={{ marginBottom: '1rem' }}>
            <IdentifierInput key={identifierType.fieldName} identifierType={identifierType} />
          </div>
        );
      }
    })
    .filter(Boolean);

  return (
    <div>
      <h4 className={styles.productiveHeading02Light}>{t('idFieldLabelText', 'Id')}</h4>
      <div className={styles.grid}>
        {identifierInputs}
        <div className={styles.addNewIdentifierButton}>
          <Button kind="ghost" size="small" onClick={() => showPatientIdentifiersOverlay(true)}>
            Add new identifier
          </Button>
        </div>
      </div>
    </div>
  );
};
