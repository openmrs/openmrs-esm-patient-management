import React, { useState, useCallback, useContext, useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import { useField } from 'formik';
import { Button } from '@carbon/react';
import { TrashCan, Edit, Reset } from '@carbon/react/icons';
import { ResourcesContext } from '../../../../offline.resources';
import { showModal, useConfig, UserHasAccess } from '@openmrs/esm-framework';
import { shouldBlockPatientIdentifierInOfflineMode } from './utils';
import { deleteIdentifierType, setIdentifierSource } from '../../../field/id/id-field.component';
import { type PatientIdentifierValue } from '../../../patient-registration.types';
import { PatientRegistrationContext } from '../../../patient-registration-context';
import { Input } from '../../basic-input/input/input.component';
import styles from '../../input.scss';

interface IdentifierInputProps {
  patientIdentifier: PatientIdentifierValue;
  fieldName: string;
}

const IdentifierInput: React.FC<IdentifierInputProps> = ({ patientIdentifier, fieldName }) => {
  const { autoGeneration, initialValue, identifierValue, identifierName, required, selectedSource } = patientIdentifier;
  const { t } = useTranslation();
  const { defaultPatientIdentifierTypes, fieldConfigurations } = useConfig();
  const { identifierTypes } = useContext(ResourcesContext);
  const { isOffline, values, setFieldValue } = useContext(PatientRegistrationContext);
  const identifierType = useMemo(
    () => identifierTypes.find((identifierType) => identifierType.uuid === patientIdentifier.identifierTypeUuid),
    [patientIdentifier, identifierTypes],
  );
  const manualEntryEnabled =
    fieldConfigurations.id.allowAutoGenerationManualEntry && selectedSource?.autoGenerationOption?.manualEntryEnabled;
  const [hideInputField, setHideInputField] = useState(autoGeneration || initialValue === identifierValue);
  const name = `identifiers.${fieldName}.identifierValue`;
  const [identifierField, identifierFieldMeta] = useField(name);

  const disabled = isOffline && shouldBlockPatientIdentifierInOfflineMode(identifierType);

  const defaultPatientIdentifierTypesMap = useMemo(() => {
    const map = {};
    defaultPatientIdentifierTypes?.forEach((typeUuid) => {
      map[typeUuid] = true;
    });
    return map;
  }, [defaultPatientIdentifierTypes]);

  const handleReset = useCallback(() => {
    setHideInputField(true);
    setFieldValue(`identifiers.${fieldName}`, {
      ...patientIdentifier,
      identifierValue: initialValue,
      selectedSource,
      autoGeneration,
    } as PatientIdentifierValue);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [initialValue, setHideInputField]);

  const handleEdit = () => {
    setHideInputField(false);
    setFieldValue(`identifiers.${fieldName}`, {
      ...patientIdentifier,
      ...setIdentifierSource(identifierType?.identifierSources?.[0], initialValue, initialValue),
      ...(autoGeneration && manualEntryEnabled && { identifierValue: initialValue || '' }),
    });
  };

  const handleDelete = () => {
    /*
    If there is an initialValue to the identifier, a confirmation modal seeking
    confirmation to delete the identifier should be shown, else in the other case,
    we can directly delete the identifier.
    */

    if (initialValue) {
      const confirmDeleteIdentifierModal = showModal('delete-identifier-confirmation-modal', {
        deleteIdentifier: (deleteIdentifier) => {
          if (deleteIdentifier) {
            setFieldValue('identifiers', deleteIdentifierType(values.identifiers, fieldName));
          }
          confirmDeleteIdentifierModal();
        },
        identifierName,
        initialValue,
      });
    } else {
      setFieldValue('identifiers', deleteIdentifierType(values.identifiers, fieldName));
    }
  };

  const showEditButton = !required && hideInputField && (!!initialValue || manualEntryEnabled);
  const showResetButton =
    (!!initialValue && initialValue !== identifierValue) || (!hideInputField && manualEntryEnabled);
  return (
    <div className={styles.IDInput}>
      {!hideInputField ? (
        <Input
          id={name}
          labelText={identifierName}
          name={name}
          disabled={disabled}
          required={required}
          invalid={!!(identifierFieldMeta.touched && identifierFieldMeta.error)}
          invalidText={identifierFieldMeta.error && t(identifierFieldMeta.error)}
          // t('identifierValueRequired', 'Identifier value is required')
          {...identifierField}
        />
      ) : (
        <div className={styles.textID}>
          <p data-testid="identifier-label" className={styles.label}>
            {required ? identifierName : `${identifierName} (${t('optional', 'optional')})`}
          </p>
          <p data-testid="identifier-placeholder" className={styles.bodyShort02}>
            {autoGeneration ? t('autoGeneratedPlaceholderText', 'Auto-generated') : identifierValue}
          </p>
          <input data-testid="identifier-input" type="hidden" {...identifierField} disabled />
          {/* This is added for any error descriptions */}
          {!!(identifierFieldMeta.touched && identifierFieldMeta.error) && (
            <span className={styles.dangerLabel01}>{identifierFieldMeta.error && t(identifierFieldMeta.error)}</span>
          )}
        </div>
      )}
      <div style={{ marginBottom: '1rem' }}>
        {showEditButton && (
          <UserHasAccess privilege="Edit Patient Identifiers">
            <Button
              data-testid="edit-button"
              size="md"
              kind="ghost"
              onClick={handleEdit}
              iconDescription={t('editIdentifierTooltip', 'Edit')}
              disabled={disabled}
              hasIconOnly>
              <Edit size={16} />
            </Button>
          </UserHasAccess>
        )}
        {showResetButton && (
          <UserHasAccess privilege="Edit Patient Identifiers">
            <Button
              size="md"
              kind="ghost"
              onClick={handleReset}
              iconDescription={t('resetIdentifierTooltip', 'Reset')}
              disabled={disabled}
              hasIconOnly>
              <Reset size={16} />
            </Button>
          </UserHasAccess>
        )}
        {!patientIdentifier.required && !defaultPatientIdentifierTypesMap[patientIdentifier.identifierTypeUuid] && (
          <UserHasAccess privilege="Delete Patient Identifiers">
            <Button
              size="md"
              kind="ghost"
              onClick={handleDelete}
              iconDescription={t('deleteIdentifierTooltip', 'Delete')}
              disabled={disabled}
              hasIconOnly>
              <TrashCan size={16} />
            </Button>
          </UserHasAccess>
        )}
      </div>
    </div>
  );
};

export default IdentifierInput;
