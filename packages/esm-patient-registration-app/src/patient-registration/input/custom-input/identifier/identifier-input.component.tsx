import * as Yup from 'yup';
import React, { useState, useEffect, useCallback } from 'react';
import styles from '../../input.scss';
import { useField } from 'formik';
import { useTranslation } from 'react-i18next';
import { Input } from '../../basic-input/input/input.component';
import { CustomPatientIdentifierType } from '../../../patient-registration-types';
import { PatientRegistrationContext } from '../../../patient-registration-context';
import { TrashCan16 } from '@carbon/icons-react';
import { Button } from 'carbon-components-react';
import camelCase from 'lodash-es/camelCase';

interface IdentifierInputProps {
  identifierType: CustomPatientIdentifierType;
}

export const IdentifierInput: React.FC<IdentifierInputProps> = ({ identifierType }) => {
  const { validationSchema, setValidationSchema, setFieldValue, setPatientIdentifiers } =
    React.useContext(PatientRegistrationContext);
  const source = identifierType.selectedSource;
  const name = `identifiers.${camelCase(identifierType.name)}`;
  const { t } = useTranslation();
  const [option, setAutoGenerationOption] = useState({
    manualEntryEnabled: source ? true : undefined,
    automaticGenerationEnabled: undefined,
  });
  const [identifierValidationSchema, setIdentifierValidationSchema] = useState(Yup.object({}));
  const [inputField] = useField(name);

  useEffect(() => {
    if (source && source.autoGenerationOption && source.autoGenerationOption.automaticGenerationEnabled) {
      identifierType.autoGenerationSource = source;
    }
  }, [source]);

  useEffect(() => {
    let validatorProps = Yup.string();
    validatorProps = validatorProps.required("Identifier can't be blank!");

    if (identifierType.format) {
      validatorProps = validatorProps.matches(new RegExp(identifierType.format), 'Invalid identifier format!');
    }

    const schemaBuilder = {};
    schemaBuilder[identifierType.name] = validatorProps;
    identifierValidationSchema[identifierType.name] = validatorProps;
    setIdentifierValidationSchema(Yup.object(schemaBuilder));
  }, []);

  useEffect(() => {
    if (source) {
      if (source.autoGenerationOption) {
        setAutoGenerationOption(source.autoGenerationOption);

        if (source.autoGenerationOption.automaticGenerationEnabled) {
          setPatientIdentifiers((identifiers) =>
            identifiers.map((identifier) =>
              identifier?.uuid === identifierType?.uuid
                ? {
                    ...identifierType,
                    autoGenerationSource: source,
                  }
                : identifier,
            ),
          );
          setFieldValue(name, '');

          if (validationSchema.fields[identifierType.name]) {
            validationSchema.fields[identifierType.name] = Yup.string();
          }
        } else {
          setValidationSchema(validationSchema.concat(identifierValidationSchema));
        }
      } else {
        setValidationSchema(validationSchema.concat(identifierValidationSchema));
        setAutoGenerationOption({
          manualEntryEnabled: true,
          automaticGenerationEnabled: false,
        });
      }
    } else {
      setValidationSchema(validationSchema.concat(identifierValidationSchema));
      setAutoGenerationOption({
        manualEntryEnabled: true,
        automaticGenerationEnabled: false,
      });
    }
  }, [source]);

  const handleDelete = useCallback(() => {
    setFieldValue(name, '');
    setPatientIdentifiers((identifiers) =>
      identifiers.map((identifier) =>
        identifier?.uuid === identifierType?.uuid
          ? {
              ...identifierType,
              selected: false,
              selectedSource: null,
              defaultSelected: false,
            }
          : identifier,
      ),
    );
  }, [identifierType]);

  const autoGenerated = !option.manualEntryEnabled || (option.manualEntryEnabled && option.automaticGenerationEnabled);

  return (
    <div className={styles.IDInput}>
      {option.manualEntryEnabled && !identifierType?.defaultSelected ? (
        <Input
          id={name}
          light
          placeholder={
            autoGenerated
              ? `${t('autoGeneratedPlaceholderText', 'Auto generated')}`
              : `${t('enterIdentifierPlaceholderText', 'Enter Identifier')}`
          }
          labelText={identifierType?.name}
          name={name}
          disabled={!option.manualEntryEnabled}
          {...inputField}
        />
      ) : (
        <div className={styles.textID}>
          <p className={styles.label}>{`${identifierType?.name}`}</p>
          <p className={styles.bodyShort02}>
            {inputField?.value && inputField?.value !== ''
              ? inputField?.value
              : t('autoGeneratedPlaceholderText', 'Auto generated')}
          </p>
        </div>
      )}
      {!identifierType?.isPrimary && (
        <Button
          kind="ghost"
          onClick={handleDelete}
          iconDescription={t('deleteIdentifierTooltip', 'Delete')}
          hasIconOnly>
          <TrashCan16 className={styles.trashCan} />
        </Button>
      )}
    </div>
  );
};
