import * as Yup from 'yup';
import React, { useState, useEffect, useCallback, useContext, useMemo } from 'react';
import styles from '../../input.scss';
import { useTranslation } from 'react-i18next';
import { Input } from '../../basic-input/input/input.component';
import { PatientIdentifierValue } from '../../../patient-registration-types';
import { PatientRegistrationContext } from '../../../patient-registration-context';
import { TrashCan16, Edit16, Undo16 } from '@carbon/icons-react';
import { Button } from 'carbon-components-react';
import { ResourcesContext } from '../../../../offline.resources';

interface IdentifierInputProps {
  patientIdentifier: PatientIdentifierValue;
  index: number;
  remove: <T>(index: number) => T;
}

export const IdentifierInput: React.FC<IdentifierInputProps> = ({ patientIdentifier, index, remove }) => {
  const { patientIdentifiers: identifierTypes } = useContext(ResourcesContext);
  const identifierType = useMemo(
    () => identifierTypes.find((identifierType) => identifierType.uuid === patientIdentifier.identifierType),
    [patientIdentifier],
  );
  const { validationSchema, setValidationSchema, setFieldValue, values } = React.useContext(PatientRegistrationContext);
  const { source, action, identifier } = patientIdentifier;
  const identifierName = identifierType.name;
  const fieldName = `identifiers[${index}].identifier`;
  const { t } = useTranslation();
  const [option, setAutoGenerationOption] = useState({
    manualEntryEnabled: source ? true : undefined,
    automaticGenerationEnabled: undefined,
  });
  const [identifierValidationSchema, setIdentifierValidationSchema] = useState(Yup.object({}));
  // This will save the value, if value is to be restored is needed
  const [restoredValue, setRestoredValue] = useState(patientIdentifier.identifier);

  useEffect(() => {
    if (source && source.autoGenerationOption && source.autoGenerationOption.automaticGenerationEnabled) {
      setFieldValue(`identifiers[${index}].autoGeneration`, true);
    }
  }, [source]);

  useEffect(() => {
    if (source) {
      if (source.autoGenerationOption) {
        setAutoGenerationOption(source.autoGenerationOption);

        if (source.autoGenerationOption.automaticGenerationEnabled) {
          setFieldValue(`identifiers[${index}].autoGeneration`, true);
          setFieldValue(`identifiers[${index}].identifier`, '');
        }
      } else {
        setAutoGenerationOption({
          manualEntryEnabled: true,
          automaticGenerationEnabled: false,
        });
        setFieldValue(`identifiers[${index}].autoGeneration`, false);
      }
    } else {
      setAutoGenerationOption({
        manualEntryEnabled: true,
        automaticGenerationEnabled: false,
      });
      setFieldValue(`identifiers[${index}].autoGeneration`, true);
    }
  }, [source]);

  const handleEdit = useCallback(() => {
    setRestoredValue(patientIdentifier.identifier);
    setFieldValue(`identifiers[${index}]`, {
      ...patientIdentifier,
      action: 'UPDATE',
      source: identifierType.identifierSources.length > 0 ? identifierType.identifierSources[0] : null,
    } as PatientIdentifierValue);
  }, [patientIdentifier]);

  const handleDelete = useCallback(() => {
    if (action === 'ADD') {
      remove(index);
    } else {
      setFieldValue(`identifiers[${index}].action`, 'DELETE');
    }
  }, [patientIdentifier]);

  const handleUndo = useCallback(() => {
    setFieldValue(`identifiers[${index}]`, {
      ...patientIdentifier,
      action: 'NONE',
      source: null,
      identifier: restoredValue,
    } as PatientIdentifierValue);
  }, [patientIdentifier, restoredValue]);

  const autoGenerated = !option.manualEntryEnabled || (option.manualEntryEnabled && option.automaticGenerationEnabled);

  return (
    <div className={styles.IDInput}>
      {option.manualEntryEnabled && (action === 'ADD' || action === 'UPDATE') ? (
        <Input
          id={identifierName}
          light
          placeholder={
            autoGenerated
              ? `${t('autoGeneratedPlaceholderText', 'Auto generated')}`
              : `${t('enterIdentifierPlaceholderText', 'Enter Identifier')}`
          }
          labelText={identifierName}
          name={fieldName}
          disabled={!option.manualEntryEnabled}
        />
      ) : (
        <div className={styles.textID}>
          <p className={styles.label}>{identifierName}</p>
          <p className={styles.bodyShort02}>
            {identifier ? identifier : t('autoGeneratedPlaceholderText', 'Auto generated')}
          </p>
        </div>
      )}
      <div>
        {patientIdentifier.action === 'UPDATE' && (
          <Button
            kind="ghost"
            onClick={handleUndo}
            iconDescription={t('restoreIdentifierTooltip', 'Restore')}
            hasIconOnly>
            <Undo16 />
          </Button>
        )}
        {patientIdentifier.action === 'NONE' && (
          <Button kind="ghost" onClick={handleEdit} iconDescription={t('editIdentifierTooltip', 'Edit')} hasIconOnly>
            <Edit16 />
          </Button>
        )}
        {!(identifierType?.isPrimary || identifierType?.required) && (
          <Button
            kind="ghost"
            onClick={handleDelete}
            iconDescription={t('deleteIdentifierTooltip', 'Delete')}
            hasIconOnly>
            <TrashCan16 className={styles.trashCan} />
          </Button>
        )}
      </div>
    </div>
  );
};
