import * as Yup from 'yup';
import React, { useState, useEffect } from 'react';
import find from 'lodash-es/find';
import { useField } from 'formik';
import { Row, Column } from 'carbon-components-react/es/components/Grid';
import { useTranslation } from 'react-i18next';
import { Input } from '../../basic-input/input/input.component';
import { PatientRegistrationContext } from '../../../patient-registration-context';
import { PatientIdentifierType } from '../../../patient-registration-types';

interface IdentifierInputProps {
  identifierType: PatientIdentifierType;
}

export const IdentifierInput: React.FC<IdentifierInputProps> = ({ identifierType }) => {
  const { validationSchema, setValidationSchema, setFieldValue, patientIdentifiersMap } =
    React.useContext(PatientRegistrationContext);
  const sources = identifierType.identifierSources;
  const sourceSelected = patientIdentifiersMap[identifierType.uuid]?.sourceSelected;
  const name = identifierType.fieldName;
  const { t } = useTranslation();
  const [option, setAutoGenerationOption] = useState({
    manualEntryEnabled: sources.length === 0 ? true : undefined,
    automaticGenerationEnabled: undefined,
  });
  const sourceName = `source-for-${name}`;
  const [selectSourceField] = useField(sourceName);
  selectSourceField.value = sourceSelected?.name;
  const [identifierValidationSchema, setIdentifierValidationSchema] = useState(Yup.object({}));

  useEffect(() => {
    if (sources.length === 1 && sources[0]?.autoGenerationOption?.automaticGenerationEnabled) {
      identifierType.autoGenerationSource = sources[0];
    }
  }, []);

  useEffect(() => {
    let validatorProps = Yup.string();

    if (identifierType.required) {
      validatorProps = validatorProps.required("Identifier can't be blank!");
    }

    if (identifierType.format) {
      validatorProps = validatorProps.matches(new RegExp(identifierType.format), 'Invalid identifier format!');
    }

    const schemaBuilder = {};
    schemaBuilder[identifierType.fieldName] = validatorProps;
    identifierValidationSchema[identifierType.fieldName] = validatorProps;
    setIdentifierValidationSchema(Yup.object(schemaBuilder));
  }, []);

  useEffect(() => {
    if (sourceSelected) {
      const selectedSource = find(sources, { name: selectSourceField.value });

      if (sourceSelected && sourceSelected?.autoGenerationOption) {
        setAutoGenerationOption(sourceSelected?.autoGenerationOption);

        if (sourceSelected?.autoGenerationOption.automaticGenerationEnabled) {
          identifierType.autoGenerationSource = sourceSelected;
          setFieldValue(name, '');

          if (validationSchema.fields[identifierType.fieldName]) {
            validationSchema.fields[identifierType.fieldName] = Yup.string();
          }
        } else {
          setValidationSchema(validationSchema.concat(identifierValidationSchema));
        }
      } else {
        setValidationSchema(validationSchema.concat(identifierValidationSchema));
        setAutoGenerationOption({
          manualEntryEnabled: true,
          automaticGenerationEnabled: false,
        });
      }
    }
  }, [patientIdentifiersMap, identifierType]);

  return (
    <>
      {sourceSelected && (
        <Input
          id={name}
          light
          placeholder={
            !option.manualEntryEnabled
              ? `${t('autoGeneratedPlaceholderText', 'Auto-generated')}`
              : option.manualEntryEnabled && option.automaticGenerationEnabled
              ? `${t('autoGeneratedPlaceholderText', 'Auto-generated')}`
              : `${t('enterIdentifierPlaceholderText', 'Enter Identifier')}`
          }
          labelText={identifierType?.name}
          name={name}
          disabled={!option.manualEntryEnabled}
        />
      )}
    </>
  );
};
